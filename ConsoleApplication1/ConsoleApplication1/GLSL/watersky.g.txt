#version 420 core

in vec3 TexCoords;
in vec2 tex;
in vec3 normal;

layout (location = 0) out vec4 color;
layout (location = 1) out vec4 BrightColor;
layout (location = 2) out vec4 Far;
layout (location = 3) out vec4 color4;

uniform samplerCube skybox;
uniform sampler2D waterMap;
uniform sampler2D waterMap2;
uniform float time;

uniform vec3 dirLightPos;
uniform vec3 cameraPos;

void main()
{
    const float _ParallaxScale = 0.5f;
    // Ambient
     float time2 = time;
     while(time2 > 100) time2 -= 100;
     vec3 Normal = normalize(0.35*texture(waterMap,tex).rgb+
                     0.65*texture(waterMap2,tex+vec2(pow(sin(time/5.0),2),-cos(time/10.0))).rgb);/*+
                    0.3*texture(waterMap,tex+vec2(pow(sin(time/50.0),5),-cos(time/4.0))).rgb+
                    0.1*texture(waterMap,tex/2.0+vec2(cos(time/8.0),-cos(1-time/16.0))).rgb);*/
     vec3 ori = texture(skybox,reflect(TexCoords,Normal)).rgb;
     color = vec4(ori,1.0);
     color = mix(color,vec4(1),0.1);
     color *= vec4(0.9,1.0,0.90,1.0);
     color *= pow(clamp(dot(Normal,normalize(dirLightPos)),0.0,1.0),1.0) * 0.8;
     color.a = 0.8;
     vec3 newdir = normalize(reflect(dirLightPos,Normal));
     vec3 diff = clamp(dot(newdir,normalize(TexCoords)),0.0,1.0) * ori * 1.5 ;
     color.rgb += diff;
     Far = vec4(0,0,0,gl_FragCoord.z);
     
     float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
     if(brightness > 0.85) //BrightColor = vec4(0.5);
        BrightColor = vec4(color.rgb, 1.0); else BrightColor = vec4(0,0,0,1.0);
     float z = gl_FragCoord.z * 2.0 - 1.0; // Back to NDC 
     z = (2.0 * 1.0 * 25.0) / (25.0 + 1.0 - z * (25.0 - 1.0)) ;	
     if(z > 25.0 - 0.0625) color.a = mix(color.a,0,(0.0625+z-25.0)*16);
}
